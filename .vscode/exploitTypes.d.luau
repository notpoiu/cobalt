--declare script: LocalScript

type Function = (...any) -> ...any

type ContentId = string
type ProtectedString = string
type BinaryString = string
type QDir = string
type QFont = string
type FloatCurveKey = any
type RotationCurveKey = any
type Secret = any
type Path2DControlPoint = any
type UniqueId = any
type SecurityCapabilities = any
type TeleportData = boolean | buffer | number | string | {[number]: TeleportData} | {[string]: TeleportData}
type AdReward = any

declare class EnumCreatorType extends EnumItem end
declare class EnumCreatorType_INTERNAL extends Enum
	Group: EnumCreatorType
	User: EnumCreatorType
end

declare class EnumGenre extends EnumItem end
declare class EnumGenre_INTERNAL extends Enum
	Adventure: EnumGenre
	All: EnumGenre
	Fantasy: EnumGenre
	Funny: EnumGenre
	Ninja: EnumGenre
	Pirate: EnumGenre
	Scary: EnumGenre
	SciFi: EnumGenre
	SkatePark: EnumGenre
	Sports: EnumGenre
	TownAndCity: EnumGenre
	Tutorial: EnumGenre
	War: EnumGenre
	WildWest: EnumGenre
end

declare class EnumMatchmakingType extends EnumItem end
declare class EnumMatchmakingType_INTERNAL extends Enum
	Default: EnumMatchmakingType
	PlayStationOnly: EnumMatchmakingType
	XboxOnly: EnumMatchmakingType
end

declare class EnumHttpRequestType extends EnumItem end
declare class EnumHttpRequestType_INTERNAL extends Enum
	Analytics: EnumHttpRequestType
	Avatar: EnumHttpRequestType
	Chat: EnumHttpRequestType
	Default: EnumHttpRequestType
	Localization: EnumHttpRequestType
	MarketplaceService: EnumHttpRequestType
	Players: EnumHttpRequestType
end

declare class DataModel extends ServiceProvider
	CreatorId: number
	CreatorType: EnumCreatorType
	GameId: number
	Genre: EnumGenre
	GraphicsQualityChangeRequest: RBXScriptSignal<boolean>
	IsSFFlagsLoaded: boolean
	JobId: string
	Loaded: RBXScriptSignal<>
	MatchmakingType: EnumMatchmakingType
	PlaceId: number
	PlaceVersion: number
	PrivateServerId: string
	PrivateServerOwnerId: number
	ScreenshotReady: RBXScriptSignal<string>
	ScreenshotSavedToAlbum: RBXScriptSignal<string, boolean, string>
	UniverseMetadataLoaded: RBXScriptSignal<>
	Workspace: Workspace
	function BindToClose(self, func: ((...any) -> ...any)): nil
	function DefineFastFlag(self, name: string, defaultValue: boolean): boolean
	function DefineFastInt(self, name: string, defaultValue: number): number
	function DefineFastString(self, name: string, defaultValue: string): string
	function GetEngineFeature(self, name: string): boolean
	function GetFastFlag(self, name: string): boolean
	function GetFastInt(self, name: string): number
	function GetFastString(self, name: string): string
	function GetJobsInfo(self): { any }
	function GetObjects(self, url: ContentId): { Instance }
	function GetObjectsAllOrNone(self, url: ContentId, binaryFormatOnly: boolean?): { Instance }
	function GetObjectsAsync(self, url: ContentId): { Instance }
	function GetObjectsList(self, urls: { any }): { any }
	function GetPlaySessionId(self): string
	function HttpGetAsync(self, url: string, httpRequestType: EnumHttpRequestType?): string
	function HttpPostAsync(self, url: string, data: string, contentType: string?, httpRequestType: EnumHttpRequestType?): string
	function InsertObjectsAndJoinIfLegacyAsync(self, url: ContentId): { Instance }
	function IsContentLoaded(self): boolean
	function IsLoaded(self): boolean
	function IsUniverseMetadataLoaded(self): boolean
	function Load(self, url: ContentId): nil
	function OpenScreenshotsFolder(self): nil
	function OpenVideosFolder(self): nil
	function ReportInGoogleAnalytics(self, category: string, action: string?, label: string?, value: number?): nil
	function SetFastFlagForTesting(self, name: string, newValue: boolean): boolean
	function SetFastIntForTesting(self, name: string, newValue: number): number
	function SetFastStringForTesting(self, name: string, newValue: string): string
	function SetFlagVersion(self, name: string, version: number): nil
	function SetIsLoaded(self, value: boolean, placeSizeInBytes: number?): nil
	function SetPlaceId(self, placeId: number): nil
	function SetUniverseId(self, universeId: number): nil
	function Shutdown(self): nil
	function HttpGet(self, url: string): (string)
	function HttpPost(self, url: string, data: string, contentType: string?): (string)
end

declare game: DataModel

declare class HttpResponse
    Body: string
    StatusCode: number
    StatusMessage: string
    Success: boolean
    Headers: {[string]: any}
end

-- \\ Scripts // --
declare function getgc(includeTables: boolean?): {Function  | any}
declare function getgenv(): { [string]: any }
declare function getloadedmodules(excludeCore: boolean?): {ModuleScript}
declare function getmodules(excludeCore: boolean?): {ModuleScript}
declare function getrenv(): { [string]: any }
declare function getreg(): {[string]: any}
declare function getrunningscripts(): {LocalScript | ModuleScript}
declare function getscriptbytecode(script: LocalScript | ModuleScript): string
declare function dumpstring(script: LocalScript | ModuleScript): string
declare function getscriptclosure(script: LocalScript | ModuleScript): Function
declare function getscriptfunction(script: LocalScript | ModuleScript): Function
declare function decompile(script: LocalScript | ModuleScript): string
declare function getscripthash(script: LocalScript | ModuleScript): string
declare function getscripts(): {LocalScript | ModuleScript}
declare function getsenv(script: LocalScript | ModuleScript): { [string]: any }
declare function getthreadidentity(): number
declare function getidentity(): number
declare function getthreadcontext(): number
declare function setthreadidentity(identity: number): ()
declare function setidentity(identity: number): ()
declare function setthreadcontext(identity: number): ()
--declare function require(script:  ModuleScript): {[string]: any}

-- \\ Misc // --
declare function identifyexecutor(): (string, string)
declare function getexecutorname(): (string, string)
declare function lz4compress(data: string): string
declare function lz4decompress(data: string, size: number): string
declare function messagebox(text: string, caption: string, flags: number): number
declare function queue_on_teleport(code: string): ()
declare function queueonteleport(code: string): ()
declare function request(options: {[string]: any}): HttpResponse
declare function http_request(options:{[string]: any}): HttpResponse
declare function setclipboard(text: string): ()
declare function writeclipboard(text: string): ()
declare function toclipboard(text:string): ()
declare function setfpscap(fps: number): ()

-- \\ Metatable // --
declare function getrawmetatable(object: any): {[string]: any}
declare function hookmetamethod(object: any, method: string, hook: Function): Function
declare function getnamecallmethod(): string
declare function isreadonly(object: any): boolean
declare function setrawmetatable(object: any, metatable: {[string]: any}): ()
declare function setreadonly(object: any, readonly: boolean): ()

-- \\ Instances // --
declare function fireclickdetector(object: Instance, distance: number?, event: string?): ()
declare function firetouchinterest(ToTouch: Instance, ThatTouches: number, State0Untouching1Touching: number): ()
declare function fireproximityprompt(object: ProximityPrompt, distance: number?): ()
declare function getcallbackvalue(object: Instance, property: string): Function?
declare class ConnectionGarbage
	Enabled: boolean
	ForeignState: boolean
	LuaConnection: boolean
	Function: Function?
	Thread: thread?

	function Fire(self, ...: any): nil
	function Defer(self, ...: any): nil
	function Disconnect(self): nil
	function Disable(self): nil
	function Enable(self): nil
end

declare function firesignal(signal: RBXScriptSignal, ...: any): ()
declare function getconnections(signal: RBXScriptSignal, context: number?): { [number]: ConnectionGarbage }
declare function get_signal_cons(signal: RBXScriptSignal, context: number?): { [number]: ConnectionGarbage }
declare function getcustomasset(path: string, noCache: boolean): string
declare function gethiddenproperty(object: Instance, property: string): (any, boolean)
declare function gethui(): Instance
declare function getinstances(): {Instance}
declare function getnilinstances(): {Instance}
declare function isscriptable(object: Instance, property: string): boolean
declare function sethiddenproperty(object: Instance, property: string, value: any): boolean
declare function setrbxclipboard(data: string): boolean
declare function setscriptable(object: Instance, property: string, value: boolean): boolean

-- \\ Input // --
declare function isrbxactive(): boolean
declare function isgameactive(): boolean
declare function mouse1click(): ()
declare function mouse1press(): ()
declare function mouse1press(): ()
declare function mouse1release(): ()
declare function mouse2click(): ()
declare function mouse2press(): ()
declare function mouse2release(): ()
declare function mousemoveabs(x: number, y: number): ()
declare function mousemoverel(x: number, y: number): ()
declare function mousescroll(pixels: number): ()

-- \\ File System // --
declare function readfile(path: string): string
declare function listfiles(path: string): {string}
declare function writefile(path: string, data: string): ()
declare function makefolder(path: string): ()
declare function appendfile(path: string, data: string): ()
declare function isfile(path: string): boolean
declare function isfolder(path: string): boolean
declare function delfile(path: string): ()
declare function delfolder(path: string): ()
declare function loadfile(path: string, chunkname: string?): (Function?, string?)
declare function dofile(path: string): ()

-- \\ Console // --
declare function rconsoleclear(): ()
declare function consoleclear(): ()
declare function rconsolecreate(): ()
declare function consolecreate(): ()
declare function rconsoledestroy(): ()
declare function consoledestroy(): ()
declare function consoledestroy(): ()
declare function rconsoleinput(): string
declare function consoleinput(): string
declare function rconsoleprint(text: string): ()
declare function consoleprint(text: string): ()
declare function rconsolesettitle(title: string): ()
declare function rconsolename(title: string): ()
declare function consolesettitle(title: string): ()

-- \\ Closures // --
declare function checkcaller(): boolean
declare function clonefunction(func: Function): Function
declare function clonefunc(func: Function): Function
declare function getcallingscript(): BaseScript
declare function hookfunction(func: Function, hook: Function): Function
declare function isfunctionhooked(func: Function): boolean
declare function restorefunction(func: Function): ()
declare function replaceclosure(func: Function, hook: Function): Function
declare function iscclosure(func: Function): boolean
declare function islclosure(func: Function): boolean
declare function isexecutorclosure(func: Function): boolean
declare function checkclosure(func: Function): boolean
declare function isourclosure(func: Function): boolean
declare function loadstring(source: string, chunkname: string?): (Function?, string?)
declare function newcclosure(func: Function): Function

-- \\ Cache // --
declare function invalidate(object: Instance): ()
declare function iscached(object: Instance): boolean
declare function replace(object: Instance, newObject: Instance): ()
declare function clonereference(object: Instance): Instance
declare function cloneref(object: Instance): Instance
declare function compareinstances(a: Instance, b: Instance): boolean
declare function base64_encode(data: string): string
declare function base64_decode(data: string): string

declare debug: {
	info: (<R...>(thread, number, string) -> R...) & (<R...>(number, string) -> R...) & (<A..., R1..., R2...>((A...) -> R1..., string) -> R2...), -- Traverses the entire stack of target thread and returns a string containing the call stack of target level details. Traverses the entire stack of current thread and returns a string containing the call stack of target level details. Traverses the entire stack of current thread and returns a string containing the call stack of target function details.
	traceback: ((string?, number?) -> string) & ((thread, string?, number?) -> string), -- Returns a full execution stack trace of stack level lvl and starting with message message before the logging. Both arguments are optional and the default value for lvl is 1 which is the current thread.
	profilebegin: (label: string) -> (), -- The text that this MicroProfiler label displays.
	profileend: () -> (), -- Stops profiling for the most recent label that <code>debug.profilebegin()</code> opened.
	getmemorycategory: () -> string, -- Returns the name of the current thread's active memory category.
	setmemorycategory: (tag: string) -> (), -- Assigns a custom tag to the current thread's memory category.
	resetmemorycategory: () -> (), -- Resets the tag assigned by <code>debug.setmemorycategory()</code> to the automatically assigned value (typically, the script name).
	getprotos: (f: Function | number) -> { [number]: any }, -- Returns a table containing the inner prototypes of function f. Use debug.getproto with activated set to true to get a list of closures.
	getproto: ((f: Function | number, index: number?, activated: true) -> { [number]: (() -> any) })
		& ((f: Function | number, index: number?, activated: boolean?) -> (() -> any)), -- Gets the inner function of f at index. Note: If activated is true, it instead will return a table of functions. These are the closures of that proto that exist within the GC.
	getstack: (level: number, index: number?) -> any, -- Returns a table containing the local variables at the stack level lvl. Unfortunately, this function does not allow you to get the arguments of a function (probably because of Luau?).
	setstack: (level: number, index: number, value: any) -> nil, -- Sets the local at index idx to value at stack level lvl. Unfortunately, you cannot set the arguments of a function with this function (probably because of Luau?).
	getupvalues: (fn: Function | number) -> { [number]: any }, -- Returns a table containing the upvalues of function or stack level f. If the function is from a script inside the game, you will get number indices instead of names because of Luau.
	getupvalue: (fn: Function | number, index: number) -> any, -- Returns the upvalue inside the function or stack levelf at index idx. If an upvalue at idx is not found, nil is returned.
	setupvalue: (fn: Function | number, index: number, newvalue: any) -> nil, -- Sets the upvalue at index idx to value in function or stack level f.
	getconstants: (f: Function | number, pseudo_indices: boolean?) -> { [number]: any }, -- Retrieve the constants in function f or at level f.
	getconstant: (f: Function | number, index: number) -> any, -- Returns the constant at the specified index in function or stack level f.
	setconstant: (f: Function | number, index: number, newvalue: any, pseudo_indices: boolean?) -> nil, -- Sets the constant at index idx to value inside function or stack level f. It's recommended to use debug.getconstants to see all of the constants available in a function before using this function.
	setmetatable: <MT>(o: any, MT) -> nil, -- Sets o's metatable to mt even if the __metatable field exists in o's metatable. Keep in mind that this function will return a boolean in Synapse X even though the function is supposed to return o according to the reference manual.
	getmetatable: <MT>(o: any) -> MT, -- Returns the metatable of object o or nil if o has no metatable. This function is not the same as getmetatable because it will always return the table even if there is __metatable in the metatable.
	validlevel: (level: number, t: thread?) -> boolean, -- Checks if level is a valid index level for the current thread or t if passed.
	getcallstack: (t: thread?) -> { [number]: { func: string, currentline: number? } }, -- Returns a table with each index having fields for the func being executed at that call stack level, and the currentline if it is a Lua closure. Uses t instead of the callers thread if one is passed.
	getregistery: () -> { [any]: any }, -- Returns the Lua registry table. This table contains all functions and threads created from any client-side scripts. Keep in mind that getgc() is actually better for most purposes.
	getfenv: (target: any) -> { [any]: any }, -- Returns the global environment table of function or stack level f. Same as getfenv except it ignores all the safety checks.
	getinfo: (fn: Function | number) -> { source: string, short_src: string, linedefined: number, what: string, name: string, namewhat: string, nups: number, func: Function } -- Returns a table with information about the function or stack level f. The what argument can be used to select specific pieces of information that will go in the returned table. For information on how to use it, read this page https://www.lua.org/pil/23.1.html.
}

declare http: {
    request: (options: {[string]: any}) -> HttpResponse
}

declare fluxus: {
    request: (options: {[string]: any}) -> HttpResponse
}

declare crypt: {
    base64encode: (data: string) -> string,
    base64_encode: (data: string) -> string,
    base64decode: (data: string) -> string,
    base64_decode: (data: string) -> string,
    encrypt: (data: string, key: string, iv: string?, mode: string?) -> (string, string),
    decrypt: (data: string, key: string, iv: string, mode: string) -> string,
    generatebytes: (size: number) -> string,
    generatekey: () -> string,
    hash: (data: string, algorithm: string) -> string,
}

-- \\ Luraph Macros // --

declare LPH_OBFUSCATED: boolean
declare LPH_NO_VIRTUALIZE: (func: Function) -> Function
declare LPH_ENCFUNC: (func: Function, encKey: string, decKey: string) -> Function
declare LPH_ENCSTR: (string: string) -> string
declare LPH_ENCNUM: (number: number) -> number
declare LPH_CRASH: () -> nil
declare LPH_JIT: (func: Function) -> Function
declare LPH_NO_UPVALUES: (func: Function) -> Function
declare LPH_LINE: number

-- \\ Luarmor Macros // --

declare LRM_IsUserPremium: boolean
declare LRM_LinkedDiscordID: string
declare LRM_ScriptName: string
declare LRM_TotalExecutions: number
declare LRM_SecondsLeft: number
declare LRM_UserNote: string
declare LRM_ScriptVersion: string

-- \\ Drawing // --

declare class DrawEntry
	Visible: boolean
	Transparency: number
	Opacity: number
	ZIndex: number
	Color: Color3

	function Remove(self): nil
	function Destroy(self): nil
	function MoveToFront(self): nil
	function MoveToBack(self): nil
end

declare class LineDrawing extends DrawEntry
	Thickness: number
	From: Vector2
	To: Vector2
	Visible: boolean
end

declare class TextDrawing extends DrawEntry
	Text: string
	TextBounds: Vector2
	Position: Vector2
	Size: number
	Font: number
	Centered: boolean
	Outlined: boolean
	OutlineColor3: boolean
end

declare class ImageDrawing extends DrawEntry
	Data: string
	ImageSize: Vector2
	Size: Vector2
	Position: Vector2
	Rounding: number
end

declare class CircleDrawing extends DrawEntry
	Thickness: number
	NumSides: number
	Radius: number
	Filled: boolean
	Position: Vector2
end

declare class SquareDrawing extends DrawEntry
	Thickness: number
	Size: Vector2
	Position: Vector2
	Filled: boolean
end

declare class TriangleDrawing extends DrawEntry
	Thickness: number
	PointA: Vector2
	PointB: Vector2
	PointC: Vector2
	Filled: boolean
end

declare class QuadDrawing extends DrawEntry
	Thickness: number
	PointA: Vector2
	PointB: Vector2
	PointC: Vector2
	PointD: Vector2
	Filled: boolean
end

declare Drawing: {
	new: ((Type: "Line") -> LineDrawing) 
		& ((Type: "Text") -> TextDrawing)
		& ((Type: "Image") -> ImageDrawing)
		& ((Type: "Circle") -> CircleDrawing)
		& ((Type: "Square") -> SquareDrawing)
		& ((Type: "Triangle") -> TriangleDrawing)
		& ((Type: "Quad") -> QuadDrawing),
	Fonts: {
		UI: number,
		System: number,
		Plex: number,
		Monospace: number
	},
	fonts: {
		UI: number,
		System: number,
		Plex: number,
		Monospace: number
	},
	Clear: () -> nil,
	clear: () -> nil
}

declare function isrenderobj(Drawing: LineDrawing | TextDrawing | ImageDrawing | CircleDrawing | SquareDrawing | TriangleDrawing | QuadDrawing): boolean
declare function setrenderproperty(Drawing: LineDrawing | TextDrawing | ImageDrawing | CircleDrawing | SquareDrawing | TriangleDrawing | QuadDrawing, Property: string, Value: any): nil
declare function getrenderproperty(Drawing: LineDrawing | TextDrawing | ImageDrawing | CircleDrawing | SquareDrawing | TriangleDrawing | QuadDrawing, Property: string): any
declare function cleardrawingcache(): nil

declare run_on_actor: (actor: Actor, source: string, ...any) -> (nil)
declare function create_comm_channel(): (number, BindableEvent)
declare function getactors(): { Actor }
declare function get_comm_channel(channel: any): BindableEvent

declare function getfflag(name: string): boolean
declare function setfflag(name: string, value: string): nil

declare WebSocket: {
	connect: (Url: string) -> {
		OnMessage: RBXScriptSignal<string>,
		OnClose: RBXScriptSignal,
		Send: (self: any?, Data: string) -> nil,
		Close: (self: any?) -> nil
	}
}

declare bit: {
	badd: (...number) -> number,
	bsub: (...number) -> number,
	bmul: (...number) -> number,
	bdiv: (...number) -> number,
	band: (...number) -> number,
	bor: (...number) -> number,
	bxor: (...number) -> number,
	bnot: (...number) -> number,
	lshift: (value: number, disp: number) -> number,
	rshift: (value: number, disp: number) -> number,
	lrotate: (value: number, disp: number) -> number,
	rrotate: (value: number, disp: number) -> number,
	arshift: (value: number, n: number) -> number,
	rol: (value: number, n: number) -> number,
	ror: (value: number, n: number) -> number,
	bpopcount: (value: number) -> number,
	bswap: (value: number) -> number,
	tohex: (value: number, nibbles: number) -> number,
	tobit: (value: number) -> number,
	btest: (...number) -> number,
	byteswap: (x: number) -> number,
	countlz: (n: number) -> number,
	countrz: (n: number) -> number,
	extract: (n: number, field: number, width: number) -> number,
	replace: (n: number, v: number, field: number, width: number) -> number
}

export type RobloxClass = 
    "Accessory" | "AccessoryDescription" | "Accoutrement" | "Actor" | "AdGui" |
    "AdPortal" | "AdvancedDragger" | "AirController" | "AlignOrientation" |
    "AlignPosition" | "AngularVelocity" | "Animation" | "AnimationConstraint" |
    "AnimationController" | "AnimationRigData" | "Animator" | "Annotation" |
    "ArcHandles" | "Atmosphere" | "AtmosphereSensor" | "Attachment" |
    "AudioAnalyzer" | "AudioChannelMixer" | "AudioChannelSplitter" |
    "AudioChorus" | "AudioCompressor" | "AudioDeviceInput" |
    "AudioDeviceOutput" | "AudioDistortion" | "AudioEcho" | "AudioEmitter" |
    "AudioEqualizer" | "AudioFader" | "AudioFilter" | "AudioFlanger" |
    "AudioLimiter" | "AudioListener" | "AudioPitchShifter" | "AudioPlayer" |
    "AudioReverb" | "AudioSearchParams" | "AudioTextToSpeech" | "Backpack" |
    "BallSocketConstraint" | "Beam" | "BillboardGui" | "BinaryStringValue" |
    "BindableEvent" | "BindableFunction" | "BlockMesh" | "BloomEffect" |
    "BlurEffect" | "BodyAngularVelocity" | "BodyColors" | "BodyForce" |
    "BodyGyro" | "BodyPartDescription" | "BodyPosition" | "BodyThrust" |
    "BodyVelocity" | "Bone" | "BoolValue" | "BoxHandleAdornment" |
    "Breakpoint" | "BrickColorValue" | "BubbleChatMessageProperties" |
    "BuoyancySensor" | "CFrameValue" | "CSGDictionaryService" | "Camera" |
    "CanvasGroup" | "CharacterMesh" | "ChorusSoundEffect" | "ClickDetector" |
    "ClimbController" | "Clouds" | "Color3Value" | "ColorCorrectionEffect" |
    "ColorGradingEffect" | "CompressorSoundEffect" | "ConeHandleAdornment" |
    "Configuration" | "ControllerManager" | "ControllerPartSensor" |
    "CornerWedgePart" | "CurveAnimation" | "CustomEvent" |
    "CustomEventReceiver" | "CustomLog" | "CylinderHandleAdornment" |
    "CylinderMesh" | "CylindricalConstraint" | "DataStoreGetOptions" |
    "DataStoreIncrementOptions" | "DataStoreOptions" | "DataStoreSetOptions" |
    "DebuggerWatch" | "Decal" | "DepthOfFieldEffect" | "Dialog" |
    "DialogChoice" | "DistortionSoundEffect" | "DoubleConstrainedValue" |
    "DragDetector" | "Dragger" | "EchoSoundEffect" | "EqualizerSoundEffect" |
    "EulerRotationCurve" | "ExperienceInviteOptions" | "ExplorerFilter" |
    "Explosion" | "FaceControls" | "FileMesh" | "Fire" | "Flag" | "FlagStand" |
    "FlangeSoundEffect" | "FloatCurve" | "FloorWire" | "FluidForceSensor" |
    "FlyweightService" | "Folder" | "ForceField" | "Frame" | "FunctionalTest" |
    "GetTextBoundsParams" | "Glue" | "GroundController" | "GuiMain" |
    "Handles" | "HapticEffect" | "Hat" | "HeightmapImporterService" |
    "HiddenSurfaceRemovalAsset" | "Highlight" | "HingeConstraint" | "Hint" |
    "Hole" | "HopperBin" | "Humanoid" | "HumanoidController" |
    "HumanoidDescription" | "HumanoidRigDescription" | "IKControl" |
    "ImageButton" | "ImageHandleAdornment" | "ImageLabel" | "InputAction" |
    "InputBinding" | "InputContext" | "IntConstrainedValue" | "IntValue" |
    "IntersectOperation" | "Keyframe" | "KeyframeMarker" | "KeyframeSequence" |
    "LineForce" | "LineHandleAdornment" | "LinearVelocity" | "LocalScript" |
    "LocalizationTable" | "ManualGlue" | "ManualWeld" | "MarkerCurve" |
    "MaterialVariant" | "MemoryStoreService" | "MeshPart" | "Message" |
    "Model" | "ModuleScript" | "Motor" | "Motor6D" | "MotorFeature" |
    "NegateOperation" | "NoCollisionConstraint" | "Noise" |
    "NonReplicatedCSGDictionaryService" | "NumberPose" | "NumberValue" |
    "ObjectValue" | "OperationGraph" | "Pants" | "ParabolaAdornment" | "Part" |
    "PartOperation" | "PartOperationAsset" | "ParticleEmitter" | "Path2D" |
    "PathfindingLink" | "PathfindingModifier" | "PitchShiftSoundEffect" |
    "Plane" | "PlaneConstraint" | "Player" | "PluginAction" |
    "PluginCapabilities" | "PointLight" | "Pose" | "PrismaticConstraint" |
    "ProximityPrompt" | "ProximityPromptService" | "RTAnimationTracker" |
    "RayValue" | "ReflectionMetadata" | "ReflectionMetadataCallbacks" |
    "ReflectionMetadataClass" | "ReflectionMetadataClasses" |
    "ReflectionMetadataEnum" | "ReflectionMetadataEnumItem" |
    "ReflectionMetadataEnums" | "ReflectionMetadataEvents" |
    "ReflectionMetadataFunctions" | "ReflectionMetadataMember" |
    "ReflectionMetadataProperties" | "ReflectionMetadataYieldFunctions" |
    "RelativeGui" | "RemoteEvent" | "RemoteFunction" | "RenderingTest" |
    "ReverbSoundEffect" | "RigidConstraint" | "RocketPropulsion" |
    "RodConstraint" | "RopeConstraint" | "Rotate" | "RotateP" | "RotateV" |
    "RotationCurve" | "ScreenGui" | "Script" | "ScrollingFrame" | "Seat" |
    "SelectionBox" | "SelectionPartLasso" | "SelectionPointLasso" |
    "SelectionSphere" | "Shirt" | "ShirtGraphic" | "SkateboardController" |
    "SkateboardPlatform" | "Skin" | "Sky" | "Smoke" | "Snap" | "Sound" |
    "SoundGroup" | "Sparkles" | "SpawnLocation" | "SpecialMesh" |
    "SphereHandleAdornment" | "SpotLight" | "SpringConstraint" |
    "StandalonePluginScripts" | "StarterGear" | "StringValue" |
    "StudioAttachment" | "StudioCallout" | "StyleDerive" | "StyleLink" |
    "StyleRule" | "StyleSheet" | "SunRaysEffect" | "SurfaceAppearance" |
    "SurfaceGui" | "SurfaceLight" | "SurfaceSelection" | "SwimController" |
    "Team" | "TeleportOptions" | "TerrainDetail" | "TerrainRegion" |
    "TestService" | "TextBox" | "TextButton" | "TextChannel" |
    "TextChatCommand" | "TextChatMessageProperties" | "TextLabel" | "Texture" |
    "Tool" | "Torque" | "TorsionSpringConstraint" | "TrackerStreamAnimation" |
    "Trail" | "TremoloSoundEffect" | "TrussPart" | "Tween" |
    "UIAspectRatioConstraint" | "UICorner" | "UIDragDetector" | "UIFlexItem" |
    "UIGradient" | "UIGridLayout" | "UIListLayout" | "UIPadding" |
    "UIPageLayout" | "UIScale" | "UISizeConstraint" | "UIStroke" |
    "UITableLayout" | "UITextSizeConstraint" | "UnionOperation" |
    "UniversalConstraint" | "UnreliableRemoteEvent" | "Vector3Curve" |
    "Vector3Value" | "VectorForce" | "VehicleController" | "VehicleSeat" |
    "VelocityMotor" | "VideoDeviceInput" | "VideoDisplay" | "VideoFrame" |
    "VideoPlayer" | "ViewportFrame" | "VirtualInputManager" |
    "VisualizationMode" | "VisualizationModeCategory" | "WedgePart" | "Weld" |
    "WeldConstraint" | "Wire" | "WireframeHandleAdornment" |
    "WorkspaceAnnotation" | "WorldModel" | "WrapDeformer" | "WrapLayer" |
    "WrapTarget"


export type LucideIconName = 
    "a-arrow-down" | "a-arrow-up" | "a-large-small" | "accessibility" |
    "activity" | "air-vent" | "airplay" | "alarm-clock" | "alarm-clock-check" |
    "alarm-clock-minus" | "alarm-clock-off" | "alarm-clock-plus" |
    "alarm-smoke" | "album" | "align-center" | "align-center-horizontal" |
    "align-center-vertical" | "align-end-horizontal" | "align-end-vertical" |
    "align-horizontal-distribute-center" | "align-horizontal-distribute-end" |
    "align-horizontal-distribute-start" | "align-horizontal-justify-center" |
    "align-horizontal-justify-end" | "align-horizontal-justify-start" |
    "align-horizontal-space-around" | "align-horizontal-space-between" |
    "align-justify" | "align-left" | "align-right" | "align-start-horizontal" |
    "align-start-vertical" | "align-vertical-distribute-center" |
    "align-vertical-distribute-end" | "align-vertical-distribute-start" |
    "align-vertical-justify-center" | "align-vertical-justify-end" |
    "align-vertical-justify-start" | "align-vertical-space-around" |
    "align-vertical-space-between" | "ambulance" | "ampersand" | "ampersands" |
    "amphora" | "anchor" | "angry" | "annoyed" | "antenna" | "anvil" |
    "aperture" | "app-window" | "app-window-mac" | "apple" | "archive" |
    "archive-restore" | "archive-x" | "armchair" | "arrow-big-down" |
    "arrow-big-down-dash" | "arrow-big-left" | "arrow-big-left-dash" |
    "arrow-big-right" | "arrow-big-right-dash" | "arrow-big-up" |
    "arrow-big-up-dash" | "arrow-down" | "arrow-down-0-1" | "arrow-down-1-0" |
    "arrow-down-a-z" | "arrow-down-from-line" | "arrow-down-left" |
    "arrow-down-narrow-wide" | "arrow-down-right" | "arrow-down-to-dot" |
    "arrow-down-to-line" | "arrow-down-up" | "arrow-down-wide-narrow" |
    "arrow-down-z-a" | "arrow-left" | "arrow-left-from-line" |
    "arrow-left-right" | "arrow-left-to-line" | "arrow-right" |
    "arrow-right-from-line" | "arrow-right-left" | "arrow-right-to-line" |
    "arrow-up" | "arrow-up-0-1" | "arrow-up-1-0" | "arrow-up-a-z" |
    "arrow-up-down" | "arrow-up-from-dot" | "arrow-up-from-line" |
    "arrow-up-left" | "arrow-up-narrow-wide" | "arrow-up-right" |
    "arrow-up-to-line" | "arrow-up-wide-narrow" | "arrow-up-z-a" |
    "arrows-up-from-line" | "asterisk" | "at-sign" | "atom" | "audio-lines" |
    "audio-waveform" | "award" | "axe" | "axis-3d" | "baby" | "backpack" |
    "badge" | "badge-alert" | "badge-cent" | "badge-check" |
    "badge-dollar-sign" | "badge-euro" | "badge-help" | "badge-indian-rupee" |
    "badge-info" | "badge-japanese-yen" | "badge-minus" | "badge-percent" |
    "badge-plus" | "badge-pound-sterling" | "badge-russian-ruble" |
    "badge-swiss-franc" | "badge-x" | "baggage-claim" | "ban" | "banana" |
    "bandage" | "banknote" | "banknote-arrow-down" | "banknote-arrow-up" |
    "banknote-x" | "barcode" | "baseline" | "bath" | "battery" |
    "battery-charging" | "battery-full" | "battery-low" | "battery-medium" |
    "battery-plus" | "battery-warning" | "beaker" | "bean" | "bean-off" |
    "bed" | "bed-double" | "bed-single" | "beef" | "beer" | "beer-off" |
    "bell" | "bell-dot" | "bell-electric" | "bell-minus" | "bell-off" |
    "bell-plus" | "bell-ring" | "between-horizontal-end" |
    "between-horizontal-start" | "between-vertical-end" |
    "between-vertical-start" | "biceps-flexed" | "bike" | "binary" |
    "binoculars" | "biohazard" | "bird" | "bitcoin" | "blend" | "blinds" |
    "blocks" | "bluetooth" | "bluetooth-connected" | "bluetooth-off" |
    "bluetooth-searching" | "bold" | "bolt" | "bomb" | "bone" | "book" |
    "book-a" | "book-audio" | "book-check" | "book-copy" | "book-dashed" |
    "book-down" | "book-headphones" | "book-heart" | "book-image" |
    "book-key" | "book-lock" | "book-marked" | "book-minus" | "book-open" |
    "book-open-check" | "book-open-text" | "book-plus" | "book-text" |
    "book-type" | "book-up" | "book-up-2" | "book-user" | "book-x" |
    "bookmark" | "bookmark-check" | "bookmark-minus" | "bookmark-plus" |
    "bookmark-x" | "boom-box" | "bot" | "bot-message-square" | "bot-off" |
    "box" | "boxes" | "braces" | "brackets" | "brain" | "brain-circuit" |
    "brain-cog" | "brick-wall" | "briefcase" | "briefcase-business" |
    "briefcase-conveyor-belt" | "briefcase-medical" | "bring-to-front" |
    "brush" | "bug" | "bug-off" | "bug-play" | "building" | "building-2" |
    "bus" | "bus-front" | "cable" | "cable-car" | "cake" | "cake-slice" |
    "calculator" | "calendar" | "calendar-1" | "calendar-arrow-down" |
    "calendar-arrow-up" | "calendar-check" | "calendar-check-2" |
    "calendar-clock" | "calendar-cog" | "calendar-days" | "calendar-fold" |
    "calendar-heart" | "calendar-minus" | "calendar-minus-2" | "calendar-off" |
    "calendar-plus" | "calendar-plus-2" | "calendar-range" |
    "calendar-search" | "calendar-sync" | "calendar-x" | "calendar-x-2" |
    "camera" | "camera-off" | "candy" | "candy-cane" | "candy-off" |
    "cannabis" | "captions" | "captions-off" | "car" | "car-front" |
    "car-taxi-front" | "caravan" | "carrot" | "case-lower" | "case-sensitive" |
    "case-upper" | "cassette-tape" | "cast" | "castle" | "cat" | "cctv" |
    "chart-area" | "chart-bar" | "chart-bar-big" | "chart-bar-decreasing" |
    "chart-bar-increasing" | "chart-bar-stacked" | "chart-candlestick" |
    "chart-column" | "chart-column-big" | "chart-column-decreasing" |
    "chart-column-increasing" | "chart-column-stacked" | "chart-gantt" |
    "chart-line" | "chart-network" | "chart-no-axes-column" |
    "chart-no-axes-column-decreasing" | "chart-no-axes-column-increasing" |
    "chart-no-axes-combined" | "chart-no-axes-gantt" | "chart-pie" |
    "chart-scatter" | "chart-spline" | "check" | "check-check" | "chef-hat" |
    "cherry" | "chevron-down" | "chevron-first" | "chevron-last" |
    "chevron-left" | "chevron-right" | "chevron-up" | "chevrons-down" |
    "chevrons-down-up" | "chevrons-left" | "chevrons-left-right" |
    "chevrons-left-right-ellipsis" | "chevrons-right" | "chevrons-right-left" |
    "chevrons-up" | "chevrons-up-down" | "chrome" | "church" | "cigarette" |
    "cigarette-off" | "circle" | "circle-alert" | "circle-arrow-down" |
    "circle-arrow-left" | "circle-arrow-out-down-left" |
    "circle-arrow-out-down-right" | "circle-arrow-out-up-left" |
    "circle-arrow-out-up-right" | "circle-arrow-right" | "circle-arrow-up" |
    "circle-check" | "circle-check-big" | "circle-chevron-down" |
    "circle-chevron-left" | "circle-chevron-right" | "circle-chevron-up" |
    "circle-dashed" | "circle-divide" | "circle-dollar-sign" | "circle-dot" |
    "circle-dot-dashed" | "circle-ellipsis" | "circle-equal" |
    "circle-fading-arrow-up" | "circle-fading-plus" | "circle-gauge" |
    "circle-help" | "circle-minus" | "circle-off" | "circle-parking" |
    "circle-parking-off" | "circle-pause" | "circle-percent" | "circle-play" |
    "circle-plus" | "circle-power" | "circle-slash" | "circle-slash-2" |
    "circle-small" | "circle-stop" | "circle-user" | "circle-user-round" |
    "circle-x" | "circuit-board" | "citrus" | "clapperboard" | "clipboard" |
    "clipboard-check" | "clipboard-copy" | "clipboard-list" |
    "clipboard-minus" | "clipboard-paste" | "clipboard-pen" |
    "clipboard-pen-line" | "clipboard-plus" | "clipboard-type" |
    "clipboard-x" | "clock" | "clock-1" | "clock-10" | "clock-11" |
    "clock-12" | "clock-2" | "clock-3" | "clock-4" | "clock-5" | "clock-6" |
    "clock-7" | "clock-8" | "clock-9" | "clock-alert" | "clock-arrow-down" |
    "clock-arrow-up" | "clock-fading" | "cloud" | "cloud-alert" | "cloud-cog" |
    "cloud-download" | "cloud-drizzle" | "cloud-fog" | "cloud-hail" |
    "cloud-lightning" | "cloud-moon" | "cloud-moon-rain" | "cloud-off" |
    "cloud-rain" | "cloud-rain-wind" | "cloud-snow" | "cloud-sun" |
    "cloud-sun-rain" | "cloud-upload" | "cloudy" | "clover" | "club" | "code" |
    "code-xml" | "codepen" | "codesandbox" | "coffee" | "cog" | "coins" |
    "columns-2" | "columns-3" | "columns-4" | "combine" | "command" |
    "compass" | "component" | "computer" | "concierge-bell" | "cone" |
    "construction" | "contact" | "contact-round" | "container" | "contrast" |
    "cookie" | "cooking-pot" | "copy" | "copy-check" | "copy-minus" |
    "copy-plus" | "copy-slash" | "copy-x" | "copyleft" | "copyright" |
    "corner-down-left" | "corner-down-right" | "corner-left-down" |
    "corner-left-up" | "corner-right-down" | "corner-right-up" |
    "corner-up-left" | "corner-up-right" | "cpu" | "creative-commons" |
    "credit-card" | "croissant" | "crop" | "cross" | "crosshair" | "crown" |
    "cuboid" | "cup-soda" | "currency" | "cylinder" | "dam" | "database" |
    "database-backup" | "database-zap" | "delete" | "dessert" | "diameter" |
    "diamond" | "diamond-minus" | "diamond-percent" | "diamond-plus" |
    "dice-1" | "dice-2" | "dice-3" | "dice-4" | "dice-5" | "dice-6" | "dices" |
    "diff" | "disc" | "disc-2" | "disc-3" | "disc-album" | "divide" | "dna" |
    "dna-off" | "dock" | "dog" | "dollar-sign" | "donut" | "door-closed" |
    "door-open" | "dot" | "download" | "drafting-compass" | "drama" |
    "dribbble" | "drill" | "droplet" | "droplet-off" | "droplets" | "drum" |
    "drumstick" | "dumbbell" | "ear" | "ear-off" | "earth" | "earth-lock" |
    "eclipse" | "egg" | "egg-fried" | "egg-off" | "ellipsis" |
    "ellipsis-vertical" | "equal" | "equal-approximately" | "equal-not" |
    "eraser" | "ethernet-port" | "euro" | "expand" | "external-link" | "eye" |
    "eye-closed" | "eye-off" | "facebook" | "factory" | "fan" |
    "fast-forward" | "feather" | "fence" | "ferris-wheel" | "figma" | "file" |
    "file-archive" | "file-audio" | "file-audio-2" | "file-axis-3d" |
    "file-badge" | "file-badge-2" | "file-box" | "file-chart-column" |
    "file-chart-column-increasing" | "file-chart-line" | "file-chart-pie" |
    "file-check" | "file-check-2" | "file-clock" | "file-code" |
    "file-code-2" | "file-cog" | "file-diff" | "file-digit" | "file-down" |
    "file-heart" | "file-image" | "file-input" | "file-json" | "file-json-2" |
    "file-key" | "file-key-2" | "file-lock" | "file-lock-2" | "file-minus" |
    "file-minus-2" | "file-music" | "file-output" | "file-pen" |
    "file-pen-line" | "file-plus" | "file-plus-2" | "file-question" |
    "file-scan" | "file-search" | "file-search-2" | "file-sliders" |
    "file-spreadsheet" | "file-stack" | "file-symlink" | "file-terminal" |
    "file-text" | "file-type" | "file-type-2" | "file-up" | "file-user" |
    "file-video" | "file-video-2" | "file-volume" | "file-volume-2" |
    "file-warning" | "file-x" | "file-x-2" | "files" | "film" | "fingerprint" |
    "fire-extinguisher" | "fish" | "fish-off" | "fish-symbol" | "flag" |
    "flag-off" | "flag-triangle-left" | "flag-triangle-right" | "flame" |
    "flame-kindling" | "flashlight" | "flashlight-off" | "flask-conical" |
    "flask-conical-off" | "flask-round" | "flip-horizontal" |
    "flip-horizontal-2" | "flip-vertical" | "flip-vertical-2" | "flower" |
    "flower-2" | "focus" | "fold-horizontal" | "fold-vertical" | "folder" |
    "folder-archive" | "folder-check" | "folder-clock" | "folder-closed" |
    "folder-code" | "folder-cog" | "folder-dot" | "folder-down" |
    "folder-git" | "folder-git-2" | "folder-heart" | "folder-input" |
    "folder-kanban" | "folder-key" | "folder-lock" | "folder-minus" |
    "folder-open" | "folder-open-dot" | "folder-output" | "folder-pen" |
    "folder-plus" | "folder-root" | "folder-search" | "folder-search-2" |
    "folder-symlink" | "folder-sync" | "folder-tree" | "folder-up" |
    "folder-x" | "folders" | "footprints" | "forklift" | "forward" | "frame" |
    "framer" | "frown" | "fuel" | "fullscreen" | "funnel" | "funnel-plus" |
    "funnel-x" | "gallery-horizontal" | "gallery-horizontal-end" |
    "gallery-thumbnails" | "gallery-vertical" | "gallery-vertical-end" |
    "gamepad" | "gamepad-2" | "gauge" | "gavel" | "gem" | "ghost" | "gift" |
    "git-branch" | "git-branch-plus" | "git-commit-horizontal" |
    "git-commit-vertical" | "git-compare" | "git-compare-arrows" | "git-fork" |
    "git-graph" | "git-merge" | "git-pull-request" | "git-pull-request-arrow" |
    "git-pull-request-closed" | "git-pull-request-create" |
    "git-pull-request-create-arrow" | "git-pull-request-draft" | "github" |
    "gitlab" | "glass-water" | "glasses" | "globe" | "globe-lock" | "goal" |
    "grab" | "graduation-cap" | "grape" | "grid-2x2" | "grid-2x2-check" |
    "grid-2x2-plus" | "grid-2x2-x" | "grid-3x3" | "grip" | "grip-horizontal" |
    "grip-vertical" | "group" | "guitar" | "ham" | "hammer" | "hand" |
    "hand-coins" | "hand-heart" | "hand-helping" | "hand-metal" |
    "hand-platter" | "handshake" | "hard-drive" | "hard-drive-download" |
    "hard-drive-upload" | "hard-hat" | "hash" | "haze" | "hdmi-port" |
    "heading" | "heading-1" | "heading-2" | "heading-3" | "heading-4" |
    "heading-5" | "heading-6" | "headphone-off" | "headphones" | "headset" |
    "heart" | "heart-crack" | "heart-handshake" | "heart-off" | "heart-pulse" |
    "heater" | "hexagon" | "highlighter" | "history" | "hop" | "hop-off" |
    "hospital" | "hotel" | "hourglass" | "house" | "house-plug" |
    "house-plus" | "house-wifi" | "ice-cream-bowl" | "ice-cream-cone" |
    "id-card" | "image" | "image-down" | "image-minus" | "image-off" |
    "image-play" | "image-plus" | "image-up" | "image-upscale" | "images" |
    "import" | "inbox" | "indent-decrease" | "indent-increase" |
    "indian-rupee" | "infinity" | "info" | "inspection-panel" | "instagram" |
    "italic" | "iteration-ccw" | "iteration-cw" | "japanese-yen" | "joystick" |
    "kanban" | "key" | "key-round" | "key-square" | "keyboard" |
    "keyboard-music" | "keyboard-off" | "lamp" | "lamp-ceiling" | "lamp-desk" |
    "lamp-floor" | "lamp-wall-down" | "lamp-wall-up" | "land-plot" |
    "landmark" | "languages" | "laptop" | "laptop-minimal" |
    "laptop-minimal-check" | "lasso" | "lasso-select" | "laugh" | "layers" |
    "layers-2" | "layout-dashboard" | "layout-grid" | "layout-list" |
    "layout-panel-left" | "layout-panel-top" | "layout-template" | "leaf" |
    "leafy-green" | "lectern" | "letter-text" | "library" | "library-big" |
    "life-buoy" | "ligature" | "lightbulb" | "lightbulb-off" | "link" |
    "link-2" | "link-2-off" | "linkedin" | "list" | "list-check" |
    "list-checks" | "list-collapse" | "list-end" | "list-filter" |
    "list-filter-plus" | "list-minus" | "list-music" | "list-ordered" |
    "list-plus" | "list-restart" | "list-start" | "list-todo" | "list-tree" |
    "list-video" | "list-x" | "loader" | "loader-circle" | "loader-pinwheel" |
    "locate" | "locate-fixed" | "locate-off" | "lock" | "lock-keyhole" |
    "lock-keyhole-open" | "lock-open" | "log-in" | "log-out" | "logs" |
    "lollipop" | "luggage" | "magnet" | "mail" | "mail-check" | "mail-minus" |
    "mail-open" | "mail-plus" | "mail-question" | "mail-search" |
    "mail-warning" | "mail-x" | "mailbox" | "mails" | "map" | "map-pin" |
    "map-pin-check" | "map-pin-check-inside" | "map-pin-house" |
    "map-pin-minus" | "map-pin-minus-inside" | "map-pin-off" | "map-pin-plus" |
    "map-pin-plus-inside" | "map-pin-x" | "map-pin-x-inside" | "map-pinned" |
    "map-plus" | "mars" | "mars-stroke" | "martini" | "maximize" |
    "maximize-2" | "medal" | "megaphone" | "megaphone-off" | "meh" |
    "memory-stick" | "menu" | "merge" | "message-circle" |
    "message-circle-code" | "message-circle-dashed" | "message-circle-heart" |
    "message-circle-more" | "message-circle-off" | "message-circle-plus" |
    "message-circle-question" | "message-circle-reply" |
    "message-circle-warning" | "message-circle-x" | "message-square" |
    "message-square-code" | "message-square-dashed" | "message-square-diff" |
    "message-square-dot" | "message-square-heart" | "message-square-lock" |
    "message-square-more" | "message-square-off" | "message-square-plus" |
    "message-square-quote" | "message-square-reply" | "message-square-share" |
    "message-square-text" | "message-square-warning" | "message-square-x" |
    "messages-square" | "mic" | "mic-off" | "mic-vocal" | "microchip" |
    "microscope" | "microwave" | "milestone" | "milk" | "milk-off" |
    "minimize" | "minimize-2" | "minus" | "monitor" | "monitor-check" |
    "monitor-cog" | "monitor-dot" | "monitor-down" | "monitor-off" |
    "monitor-pause" | "monitor-play" | "monitor-smartphone" |
    "monitor-speaker" | "monitor-stop" | "monitor-up" | "monitor-x" | "moon" |
    "moon-star" | "mountain" | "mountain-snow" | "mouse" | "mouse-off" |
    "mouse-pointer" | "mouse-pointer-2" | "mouse-pointer-ban" |
    "mouse-pointer-click" | "move" | "move-3d" | "move-diagonal" |
    "move-diagonal-2" | "move-down" | "move-down-left" | "move-down-right" |
    "move-horizontal" | "move-left" | "move-right" | "move-up" |
    "move-up-left" | "move-up-right" | "move-vertical" | "music" | "music-2" |
    "music-3" | "music-4" | "navigation" | "navigation-2" |
    "navigation-2-off" | "navigation-off" | "network" | "newspaper" | "nfc" |
    "non-binary" | "notebook" | "notebook-pen" | "notebook-tabs";

export type LucideIconName2 = "notebook-text" | "notepad-text" | "notepad-text-dashed" | "nut" |
"nut-off" | "octagon" | "octagon-alert" | "octagon-minus" |
"octagon-pause" | "octagon-x" | "omega" | "option" | "orbit" | "origami" |
"package" | "package-2" | "package-check" | "package-minus" |
"package-open" | "package-plus" | "package-search" | "package-x" |
"paint-bucket" | "paint-roller" | "paintbrush" | "paintbrush-vertical" |
"palette" | "panel-bottom" | "panel-bottom-close" | "panel-bottom-dashed" |
"panel-bottom-open" | "panel-left" | "panel-left-close" |
"panel-left-dashed" | "panel-left-open" | "panel-right" |
"panel-right-close" | "panel-right-dashed" | "panel-right-open" |
"panel-top" | "panel-top-close" | "panel-top-dashed" | "panel-top-open" |
"panels-left-bottom" | "panels-right-bottom" | "panels-top-left" |
"paperclip" | "parentheses" | "parking-meter" | "party-popper" | "pause" |
"paw-print" | "pc-case" | "pen" | "pen-line" | "pen-off" | "pen-tool" |
"pencil" | "pencil-line" | "pencil-off" | "pencil-ruler" | "pentagon" |
"percent" | "person-standing" | "philippine-peso" | "phone" |
"phone-call" | "phone-forwarded" | "phone-incoming" | "phone-missed" |
"phone-off" | "phone-outgoing" | "pi" | "piano" | "pickaxe" |
"picture-in-picture" | "picture-in-picture-2" | "piggy-bank" | "pilcrow" |
"pilcrow-left" | "pilcrow-right" | "pill" | "pill-bottle" | "pin" |
"pin-off" | "pipette" | "pizza" | "plane" | "plane-landing" |
"plane-takeoff" | "play" | "plug" | "plug-2" | "plug-zap" | "plus" |
"pocket" | "pocket-knife" | "podcast" | "pointer" | "pointer-off" |
"popcorn" | "popsicle" | "pound-sterling" | "power" | "power-off" |
"presentation" | "printer" | "printer-check" | "projector" |
"proportions" | "puzzle" | "pyramid" | "qr-code" | "quote" | "rabbit" |
"radar" | "radiation" | "radical" | "radio" | "radio-receiver" |
"radio-tower" | "radius" | "rail-symbol" | "rainbow" | "rat" | "ratio" |
"receipt" | "receipt-cent" | "receipt-euro" | "receipt-indian-rupee" |
"receipt-japanese-yen" | "receipt-pound-sterling" |
"receipt-russian-ruble" | "receipt-swiss-franc" | "receipt-text" |
"rectangle-ellipsis" | "rectangle-horizontal" | "rectangle-vertical" |
"recycle" | "redo" | "redo-2" | "redo-dot" | "refresh-ccw" |
"refresh-ccw-dot" | "refresh-cw" | "refresh-cw-off" | "refrigerator" |
"regex" | "remove-formatting" | "repeat" | "repeat-1" | "repeat-2" |
"replace" | "replace-all" | "reply" | "reply-all" | "rewind" | "ribbon" |
"rocket" | "rocking-chair" | "roller-coaster" | "rotate-3d" |
"rotate-ccw" | "rotate-ccw-square" | "rotate-cw" | "rotate-cw-square" |
"route" | "route-off" | "router" | "rows-2" | "rows-3" | "rows-4" | "rss" |
"ruler" | "russian-ruble" | "sailboat" | "salad" | "sandwich" |
"satellite" | "satellite-dish" | "saudi-riyal" | "save" | "save-all" |
"save-off" | "scale" | "scale-3d" | "scaling" | "scan" | "scan-barcode" |
"scan-eye" | "scan-face" | "scan-heart" | "scan-line" | "scan-qr-code" |
"scan-search" | "scan-text" | "school" | "scissors" |
"scissors-line-dashed" | "screen-share" | "screen-share-off" | "scroll" |
"scroll-text" | "search" | "search-check" | "search-code" |
"search-slash" | "search-x" | "section" | "send" | "send-horizontal" |
"send-to-back" | "separator-horizontal" | "separator-vertical" | "server" |
"server-cog" | "server-crash" | "server-off" | "settings" | "settings-2" |
"shapes" | "share" | "share-2" | "sheet" | "shell" | "shield" |
"shield-alert" | "shield-ban" | "shield-check" | "shield-ellipsis" |
"shield-half" | "shield-minus" | "shield-off" | "shield-plus" |
"shield-question" | "shield-user" | "shield-x" | "ship" | "ship-wheel" |
"shirt" | "shopping-bag" | "shopping-basket" | "shopping-cart" | "shovel" |
"shower-head" | "shrimp" | "shrink" | "shrub" | "shuffle" | "sigma" |
"signal" | "signal-high" | "signal-low" | "signal-medium" | "signal-zero" |
"signature" | "signpost" | "signpost-big" | "siren" | "skip-back" |
"skip-forward" | "skull" | "slack" | "slash" | "slice" |
"sliders-horizontal" | "sliders-vertical" | "smartphone" |
"smartphone-charging" | "smartphone-nfc" | "smile" | "smile-plus" |
"snail" | "snowflake" | "sofa" | "soup" | "space" | "spade" | "sparkle" |
"sparkles" | "speaker" | "speech" | "spell-check" | "spell-check-2" |
"spline" | "spline-pointer" | "split" | "spray-can" | "sprout" | "square" |
"square-activity" | "square-arrow-down" | "square-arrow-down-left" |
"square-arrow-down-right" | "square-arrow-left" |
"square-arrow-out-down-left" | "square-arrow-out-down-right" |
"square-arrow-out-up-left" | "square-arrow-out-up-right" |
"square-arrow-right" | "square-arrow-up" | "square-arrow-up-left" |
"square-arrow-up-right" | "square-asterisk" |
"square-bottom-dashed-scissors" | "square-chart-gantt" | "square-check" |
"square-check-big" | "square-chevron-down" | "square-chevron-left" |
"square-chevron-right" | "square-chevron-up" | "square-code" |
"square-dashed" | "square-dashed-bottom" | "square-dashed-bottom-code" |
"square-dashed-kanban" | "square-dashed-mouse-pointer" | "square-divide" |
"square-dot" | "square-equal" | "square-function" | "square-kanban" |
"square-library" | "square-m" | "square-menu" | "square-minus" |
"square-mouse-pointer" | "square-parking" | "square-parking-off" |
"square-pen" | "square-percent" | "square-pi" | "square-pilcrow" |
"square-play" | "square-plus" | "square-power" | "square-radical" |
"square-round-corner" | "square-scissors" | "square-sigma" |
"square-slash" | "square-split-horizontal" | "square-split-vertical" |
"square-square" | "square-stack" | "square-terminal" | "square-user" |
"square-user-round" | "square-x" | "squircle" | "squirrel" | "stamp" |
"star" | "star-half" | "star-off" | "step-back" | "step-forward" |
"stethoscope" | "sticker" | "sticky-note" | "store" |
"stretch-horizontal" | "stretch-vertical" | "strikethrough" | "subscript" |
"sun" | "sun-dim" | "sun-medium" | "sun-moon" | "sun-snow" | "sunrise" |
"sunset" | "superscript" | "swatch-book" | "swiss-franc" |
"switch-camera" | "sword" | "swords" | "syringe" | "table" | "table-2" |
"table-cells-merge" | "table-cells-split" | "table-columns-split" |
"table-of-contents" | "table-properties" | "table-rows-split" | "tablet" |
"tablet-smartphone" | "tablets" | "tag" | "tags" | "tally-1" | "tally-2" |
"tally-3" | "tally-4" | "tally-5" | "tangent" | "target" | "telescope" |
"tent" | "tent-tree" | "terminal" | "test-tube" | "test-tube-diagonal" |
"test-tubes" | "text" | "text-cursor" | "text-cursor-input" |
"text-quote" | "text-search" | "text-select" | "theater" | "thermometer" |
"thermometer-snowflake" | "thermometer-sun" | "thumbs-down" | "thumbs-up" |
"ticket" | "ticket-check" | "ticket-minus" | "ticket-percent" |
"ticket-plus" | "ticket-slash" | "ticket-x" | "tickets" | "tickets-plane" |
"timer" | "timer-off" | "timer-reset" | "toggle-left" | "toggle-right" |
"toilet" | "tornado" | "torus" | "touchpad" | "touchpad-off" |
"tower-control" | "toy-brick" | "tractor" | "traffic-cone" |
"train-front" | "train-front-tunnel" | "train-track" | "tram-front" |
"transgender" | "trash" | "trash-2" | "tree-deciduous" | "tree-palm" |
"tree-pine" | "trees" | "trello" | "trending-down" | "trending-up" |
"trending-up-down" | "triangle" | "triangle-alert" | "triangle-dashed" |
"triangle-right" | "trophy" | "truck" | "turtle" | "tv" | "tv-minimal" |
"tv-minimal-play" | "twitch" | "twitter" | "type" | "type-outline" |
"umbrella" | "umbrella-off" | "underline" | "undo" | "undo-2" |
"undo-dot" | "unfold-horizontal" | "unfold-vertical" | "ungroup" |
"university" | "unlink" | "unlink-2" | "unplug" | "upload" | "usb" |
"user" | "user-check" | "user-cog" | "user-minus" | "user-pen" |
"user-plus" | "user-round" | "user-round-check" | "user-round-cog" |
"user-round-minus" | "user-round-pen" | "user-round-plus" |
"user-round-search" | "user-round-x" | "user-search" | "user-x" | "users" |
"users-round" | "utensils" | "utensils-crossed" | "utility-pole" |
"variable" | "vault" | "vegan" | "venetian-mask" | "venus" |
"venus-and-mars" | "vibrate" | "vibrate-off" | "video" | "video-off" |
"videotape" | "view" | "voicemail" | "volleyball" | "volume" | "volume-1" |
"volume-2" | "volume-off" | "volume-x" | "vote" | "wallet" |
"wallet-cards" | "wallet-minimal" | "wallpaper" | "wand" |
"wand-sparkles" | "warehouse" | "washing-machine" | "watch" | "waves" |
"waves-ladder" | "waypoints" | "webcam" | "webhook" | "webhook-off" |
"weight" | "wheat" | "wheat-off" | "whole-word" | "wifi" | "wifi-high" |
"wifi-low" | "wifi-off" | "wifi-zero" | "wind" | "wind-arrow-down" |
"wine" | "wine-off" | "workflow" | "worm" | "wrap-text" | "wrench" | "x" |
"youtube" | "zap" | "zap-off" | "zoom-in" | "zoom-out"


type SharedEnvironment = {
    -- Services
    CoreGui: CoreGui,
    TweenService: TweenService,
    Players: Players,
    ContentProvider: ContentProvider,
    RunService: RunService,
    UserInputService: UserInputService,

    -- Players
    LocalPlayer: Player,

    -- UI Utils
    ScreenGui: ScreenGui,
    Drag: {
        Setup: (Frame: GuiObject, DragFrame: GuiObject, Callback: (Info: {}, Input: InputObject) -> ()?) -> (),
    },
    Interface: {
		New: (ClassName: RobloxClass, Properties: { [string | number]: any }?) -> Instance,
		NewIcon: (IconName: LucideIconName | LucideIconName2, Properties: { [string | number]: any }) -> ImageLabel,
		HideCorner: (Frame: GuiObject, Size: UDim2, Offset: Vector2?) -> Frame,
		GetScreenParent: () -> Instance,
	},
    Highlighter: {
        Run: (source: string) -> string,
        Colors: {
            Keyword: string,
            String: string,
            Number: string,
            Nil: string,
            Boolean: string,
            Function: string,
            Self: string,
            Local: string,
            Text: string,
            LocalMethod: string,
            BuiltIn: string,
            Comment: string,
        },

        Keywords: {
            Lua: {
                ["and"]: string,
                ["break"]: string,
                ["or"]: string,
                ["else"]: string,
                ["elseif"]: string,
                ["if"]: string,
                ["then"]: string,
                ["until"]: string,
                ["repeat"]: string,
                ["while"]: string,
                ["do"]: string,
                ["for"]: string,
                ["in"]: string,
                ["end"]: string,
                ["local"]: string,
                ["return"]: string,
                ["function"]: string,
                ["export"]: string,
            },
            Roblox: {
                game: string,
                workspace: string,
                script: string,
                math: string,
                string: string,
                table: string,
                task: string,
                wait: string,
                select: string,
                next: string,
                Enum: string,
                error: string,
                warn: string,
                tick: string,
                assert: string,
                shared: string,
                loadstring: string,
                tonumber: string,
                tostring: string,
                type: string,
                typeof: string,
                unpack: string,
                print: string,
                Instance: string,
                CFrame: string,
                Vector3: string,
                Vector2: string,
                Color3: string,
                UDim: string,
                UDim2: string,
                Ray: string,
                BrickColor: string,
                OverlapParams: string,
                RaycastParams: string,
                Axes: string,
                Random: string,
                Region3: string,
                Rect: string,
                TweenInfo: string,
                collectgarbage: string,
                ["not"]: string,
                ["utf8"]: string,
                ["pcall"]: string,
                ["xpcall"]: string,
                ["_G"]: string,
                ["setmetatable"]: string,
                ["getmetatable"]: string,
                ["os"]: string,
                ["pairs"]: string,
                ["ipairs"]: string,
            },
        },
    },
    Icons: {
        GetIcon: (iconName: string) -> Icon?,
        SetIcon: (imageInstance: ImageLabel, iconName: string) -> (),
    },
    Sonner: any, -- Add specific types if available
	Connections: { RBXScriptConnection },
    Connect: (Connection: RBXScriptConnection) -> RBXScriptConnection,
    Disconnect: (Connection: RBXScriptConnection) -> boolean,
    Unload: () -> nil,

    -- Spy Utils
    Logs: { [number]: CallInfo },

    Hooks: { [Function]: Function },
    MetaHook: Function,

    -- Utility Functions
    gethui: () -> Instance,
    IsClickInput: (Input: InputObject) -> boolean,
    IsMoveInput: (Input: InputObject) -> boolean,
    IsMouseOverFrame: (Frame: GuiObject, Position: Vector2) -> boolean,
}

-- Icon type used by Icons module
type Icon = {
    Url: string,
    Id: number,
    IconName: string,
    ImageRectOffset: Vector2,
    ImageRectSize: Vector2,
}

type RemoteInfo = { [number]: any }
type CallInfo = { [number]: any }

-- Main wax type
declare wax: {
    version: string,
    envname: string,
    shared: any,
    script: LuaSourceContainer,
    require: Function,
}